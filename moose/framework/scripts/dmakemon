#!/usr/bin/python
import os, sys, PyQt4, re, inspect, subprocess, re, datetime
from PyQt4 import QtCore, QtGui

# Get the real path of peacock
if(os.path.islink(sys.argv[0])):
  pathname = os.path.dirname(os.path.realpath(sys.argv[0]))
else:
  pathname = os.path.dirname(sys.argv[0])
  pathname = os.path.abspath(pathname)

subdirs = ['gui','utils','vtk','mesh_info','plug_ins']

for subdir in subdirs:
  sys.path.append(pathname + '/' + subdir)

# Add the utilities/python_getpot directory
MOOSE_DIR = pathname + '/../moose'
#### See if MOOSE_DIR is already in the environment instead
if os.environ.has_key("MOOSE_DIR"):
  MOOSE_DIR = os.environ['MOOSE_DIR']
elif os.environ.has_key("MOOSE_DEV"):
  MOOSE_DIR = pathname + '/../devel/moose'

sys.path.append(MOOSE_DIR + '/scripts/common')

from optparse import OptionParser

try:
  _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
  _fromUtf8 = lambda s: s

''' A widget with a name label, progress bar and value label '''
class BarWidget(QtGui.QWidget):
  def __init__(self, username):
    QtGui.QWidget.__init__(self)

    self.main_layout = QtGui.QHBoxLayout()

    self.bar = QtGui.QProgressBar()
    self.username_label = QtGui.QLabel(username)
    self.value_label = QtGui.QLabel()

    self.main_layout.addWidget(self.username_label)
    self.main_layout.addWidget(self.bar)
    self.main_layout.addWidget(self.value_label)

    self.setLayout(self.main_layout)

  def setValue(self, value):
    self.value_label.setText(str(value))
    self.bar.setValue(value)

  def setMaximum(self, value):
    self.bar.setMaximum(value)

'''Base class for a widget that contains multiple BarWidgets that update periodically'''
class BarContainerBase(QtGui.QGroupBox):
  def __init__(self, name):
    QtGui.QWidget.__init__(self, name)
    self.bars = {}

    self.main_layout = QtGui.QVBoxLayout()

    self.updateBars()

    self.setLayout(self.main_layout)

    self.timer = QtCore.QTimer()
    self.timer.setInterval(2000)
    self.timer.timeout.connect(self.updateBars)
    self.timer.start()


  ''' "Pure virtual" that should return a dictionary of name:value for each Bar to be displayed '''
  def getInfo():
    raise RuntimeError

  ''' Updates all of the bars '''
  def updateBars(self):
    info = self.getInfo()

    max_value = 0

    for name,value in info.items():
      if value > max_value:
        max_value = value

    # Set them all to zero
    for name, bar in self.bars.items():
      if name not in info:
        bar.hide()

      bar.setValue(0)
      bar.setMaximum(max_value)

    for name, value in info.items():
      bar = None

      if name not in self.bars:
        bar = BarWidget(name)
        self.main_layout.addWidget(bar)

        self.bars[name] = bar
      else:
        bar = self.bars[name]

      bar.show()
      bar.setValue(value)

''' Collection of bars showing the users using your machine '''
class UsersWidget(BarContainerBase):
  def __init__(self):
    BarContainerBase.__init__(self, 'Using You')

  def getInfo(self):
    raw_log = subprocess.check_output("cat /var/log/system.log | grep job_summary | tail -n 2000", shell=True)
    raw_log_lines = raw_log.split('\n')

    whos_compiling = {}

    date_re = re.compile('(\w+\s+\w+\s[0-9:]+)')
    username_re = re.compile('/Users/(\w+)')

    for line in raw_log_lines:
      if 'COMPILE_OK' in line or 'COMPILE_ERROR' in line:
        date_m = date_re.match(line)
        if date_m:
          time_string = date_m.group(1)
          date = datetime.datetime.strptime(str(datetime.date.today().year) + " " + time_string, '%Y %b %d %H:%M:%S')
          if( (datetime.datetime.now() - date).total_seconds() < 600): # Was this in the last 10 minutes?
            m = username_re.search(line)
            if m:
              username = m.group(1)
              if username not in whos_compiling:
                whos_compiling[username] = 1
              else:
                whos_compiling[username] += 1

    return whos_compiling

''' Collection of bars showing the machines you're using '''
class UsingWidget(BarContainerBase):
  def __init__(self):
    BarContainerBase.__init__(self, "You're Using")

  def getInfo(self):
    raw_info = subprocess.check_output("distccmon-text", shell=True)
    raw_info_lines = raw_info.split('\n')

    using_who = {}

    machine_re = re.compile(r'(\S+)\[\d+\]$')
    # username_re = re.compile('/Users/(\w+)')

    for line in raw_info_lines:
      machine_m = machine_re.search(line)
      if machine_m:
        machine = machine_m.group(1)
        if machine not in using_who:
          using_who[machine] = 1
        else:
          using_who[machine] += 1

    return using_who

''' Main window '''
class UiBox(QtGui.QMainWindow):
  def __init__(self, options, args, qt_app, win_parent = None):
    QtGui.QMainWindow.__init__(self, win_parent, QtCore.Qt.WindowStaysOnTopHint)
    self.options = options
    self.setWindowTitle('DMakeMon')
    self.qt_app = qt_app

    self.initUI()

    # Pull this window to the foreground
    self.raise_()


  def initUI(self):
    self.main_ui = QtGui.QWidget(self)
    self.main_ui.setObjectName(_fromUtf8("Dialog"))
    self.main_layout = QtGui.QVBoxLayout()
    self.setCentralWidget(self.main_ui)

    self.users_widget = UsersWidget()
    self.using_widget = UsingWidget()

    self.main_layout.addWidget(self.users_widget)
    self.main_layout.addWidget(self.using_widget)

    self.main_ui.setLayout(self.main_layout)


if __name__ == '__main__':
  usage = "Usage: %prog [options]"
  description = "Monitor DMake Usage"
  parser = OptionParser(usage=usage, description=description)

#  parser.add_option("-e", "--executable", dest="executable",
#                    help="The executable you would like to build an input file for.  If not supplied an executable will be searched for.  The searched for executable will default to the optimized version of the executable (if available).")

  (options, args) = parser.parse_args()

  app = QtGui.QApplication(sys.argv)
  main_window = UiBox(options, args, app)
  main_window.show()
  main_window.raise_()

  app.exec_()
